Analyze the code and return a markdown report with quality control and validation results:

# Code Analysis Report

## Status
- **Status**: `success|error <error if there are any code_issues or quality_issues>`
- **Message**: Analysis summary

## Metadata
- **Timestamp**: ISO timestamp
- **Version**: analyzer version
- **Execution Time**: time in ms

## Code Issues
| Line | Severity | Message | Error Code | Fix | Code | Category |
|------|----------|---------|------------|-----|------|----------|
| line_number | critical/warning/info | Issue description | code snippet | fix for the issue | fixed code snippet | syntax/logic/security/performance |

## Quality Issues
| Issue | Severity | Fix | Code | Impact | Best Practice |
|-------|----------|-----|------|---------|---------------|
| quality issue | high/medium/low | fix for the issues | code snippet | description of the impact | reference to best practice |

## Metrics
- **Complexity**: cyclomatic complexity score
- **Maintainability**: maintainability index
- **Test Coverage**: percentage
- **Duplication**: percentage of duplicate code

Perform the following checks using {{checklist}}:
1. Code syntax validation
2. Error detection
3. Quality assessment
4. Security vulnerabilities
5. Performance optimization
6. Best practices compliance

Note:
- status: success if no code_issues and quality_issues are found, error if any issues exist
- severity levels indicate the urgency of addressing the issue
- metrics provide quantitative measures of code quality
- NO COMMENTS OR EXPLANATIONS, ONLY THE MARKDOWN RESPONSE