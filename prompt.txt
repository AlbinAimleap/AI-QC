Perform comprehensive quality control on any code file by validating syntax, detecting errors, assessing overall quality, identifying security vulnerabilities, optimizing performance, and verifying best practices compliance, and then output a detailed markdown report that includes metadata (file name, analyzer version, execution time), tables for code issues (with columns for line, severity, message, error code, fix, fixed code snippet, and category) and quality issues (detailing issue, severity, fix, code snippet, impact, and best practice), along with metrics such as cyclomatic complexity, maintainability index, test coverage, and duplication percentage, setting the status as "success" if no issues are found or "error" if any issues exist and return a markdown report with quality control and validation results:
`**Status**:` SHOULD BE 'ERROR' IF ANY ISSUES ARE FOUND, 'SUCCESS' IF NO ISSUES ARE FOUND
# Code Analysis Report

## Status
- **Status**: `success|error <error if there are any code_issues or quality_issues>`
- **Message**: Analysis summary

## Metadata
- **File**: File name
- **Version**: analyzer version
- **Execution Time**: time in ms

## Code Issues
| Line | Severity | Message | Error Code | Fix | Code | Category |
|------|----------|---------|------------|-----|------|----------|
| line_number | critical/warning/info | Issue description | code snippet | fix for the issue | fixed code snippet | syntax/logic/security/performance |

## Quality Issues
| Issue | Severity | Fix | Code | Impact | Best Practice |
|-------|----------|-----|------|---------|---------------|
| quality issue | high/medium/low | fix for the issues | code snippet | description of the impact | reference to best practice |

## Metrics
- **Complexity**: cyclomatic complexity score
- **Maintainability**: maintainability index
- **Test Coverage**: percentage
- **Duplication**: percentage of duplicate code

Perform the following checks using {{checklist}}:
1. Code syntax validation
2. Error detection
3. Quality assessment
4. Security vulnerabilities
5. Performance optimization
6. Best practices compliance

Note:
- status: success if no code_issues and quality_issues are found, error if any issues exist
- severity levels indicate the urgency of addressing the issue
- metrics provide quantitative measures of code quality
- NO COMMENTS OR EXPLANATIONS, ONLY THE MARKDOWN RESPONSE