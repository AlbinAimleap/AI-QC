name: Formatted Output
run-name: QC-AI Test || ${{ github.event.inputs.branch }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to Run"
        required: true
        default: "main"
      code_file:
        description: "What is your code file name? (without spaces, lowercase)"
        required: true
        default: "your_code"
      prompt_file:
        description: "What is your prompt file name? (without spaces, lowercase)"
        required: false
        default: ""
      checklist_file:
        description: "What is your checklist file name? (without spaces, lowercase)"
        required: false
        default: ""
  repository_dispatch:
    types:
      - trigger-qc-test

jobs:
  setup-aws-credentials:
    runs-on: ubuntu-24.04 

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Set AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV

    - name: Install AWS CLI
      run: |
        # Install AWS CLI using Snap
        sudo snap install aws-cli --classic
        aws --version 

    - name: Install Python Dependencies
      run: |
        # Install Python dependencies
        python3 -m pip install --upgrade pip
        pip install boto3 python-dotenv

    - name: Run QC Script
      run: |
        ls -l .
        CODE_FILES="${{ github.event.inputs.code_file }}"
        PROMPT_FILE="${{ github.event.inputs.prompt_file }}"
        CHECKLIST_FILE="${{ github.event.inputs.checklist_file }}"
        OUTPUT_FILE="qc_output.log"

        # Convert comma-separated code files to space-separated and append .py
        CONTEXT_FILES=$(echo "$CODE_FILES" | tr ',' ' ' | sed 's/\([^ ]*\)/\1.py/g')

        if [[ -z "$PROMPT_FILE" && -z "$CHECKLIST_FILE" ]]; then
          echo "Running basic QC with context files: $CONTEXT_FILES"
          python qc.py --context $CONTEXT_FILES > "$OUTPUT_FILE" 2>&1
        else
          PROMPT_FILE="${PROMPT_FILE}.txt"
          CHECKLIST_FILE="${CHECKLIST_FILE}.txt"
          echo "Running QC with context: $CONTEXT_FILES, prompt: $PROMPT_FILE, checklist: $CHECKLIST_FILE"
          python qc.py --context $CONTEXT_FILES --prompt "$PROMPT_FILE" --checklist "$CHECKLIST_FILE" > "$OUTPUT_FILE" 2>&1
        fi
    - name: Display QC Output
      run: |
        echo "==== QC Script Output ===="
        cat qc_output.log

    - name: Create GitHub Issue on Error
      if: ${{ always() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check for error status in QC output
        if grep -q '"status": "error"' qc_output.log || grep -q '**Status**: error' qc_output.log; then
          echo "Error detected, parsing output and creating GitHub issues..."

          # Read the QC output
          QC_OUTPUT=$(cat qc_output.log)
          ISSUE_TITLE="${{ github.workflow }} || ${{ github.event.inputs.branch }}"

          # Extract sections from the output
          METADATA=$(echo "$QC_OUTPUT" | awk '/## Metadata/,/## Code Issues/' | grep -v "## Code Issues")
          CODE_ISSUES=$(echo "$QC_OUTPUT" | awk '/## Code Issues/,/## Quality Issues/' | grep -v "## Quality Issues")
          QUALITY_ISSUES=$(echo "$QC_OUTPUT" | awk '/## Quality Issues/,/## Metrics/' | grep -v "## Metrics")
          METRICS=$(echo "$QC_OUTPUT" | awk '/## Metrics/,/EOF/')

          # Format the body
          MARKDOWN_BODY="# QC Analysis Report
          $METADATA
          $CODE_ISSUES
          $QUALITY_ISSUES
          $METRICS"

          # Create GitHub issue
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$MARKDOWN_BODY" \
            --repo "${{ github.repository }}"
        else
          echo "No error detected, skipping issue creation."
        fi
